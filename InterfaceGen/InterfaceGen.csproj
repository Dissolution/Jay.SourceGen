<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <!-- ðŸ‘‡ Source generators must target netstandard 2.0 -->
        <TargetFramework>netstandard2.0</TargetFramework>
        <!-- Use the latest + greatest features -->
        <LangVersion>latest</LangVersion>
        <Nullable>enable</Nullable>
        <ImplicitUsings>true</ImplicitUsings>
        <!-- Jay.SourceGen.XxxGen -->
        <AssemblyName>Jay.SourceGen.$(MSBuildProjectName)</AssemblyName>
        <RootNamespace>Jay.SourceGen.$(MSBuildProjectName.Replace(" ", "_"))</RootNamespace>
        <!-- ðŸ‘‡ We don't want to reference the source generator dll directly in consuming projects -->
        <IncludeBuildOutput>false</IncludeBuildOutput>
        <IsRoslynComponent>true</IsRoslynComponent>
        <!-- Recommended by VS -->
        <EnforceExtendedAnalyzerRules>true</EnforceExtendedAnalyzerRules>
        <Configurations>Debug;Release;Attach</Configurations>
    </PropertyGroup>

    <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Attach|AnyCPU'">
        <DefineConstants>$(DefineConstants);DEBUG</DefineConstants>
    </PropertyGroup>

    <!-- The following libraries include the source generator interfaces and types we need -->
    <ItemGroup>
        <PackageReference Include="Microsoft.CodeAnalysis.Analyzers" Version="3.3.4">
            <PrivateAssets>all</PrivateAssets>
        </PackageReference>
        <PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="4.5.0">
            <PrivateAssets>all</PrivateAssets>
        </PackageReference>
    </ItemGroup>

    <!-- Generator Dependencies -->
    <ItemGroup>
        <PackageReference Include="IndexRange" Version="1.0.2">
            <GeneratePathProperty>true</GeneratePathProperty>
            <PrivateAssets>all</PrivateAssets>
        </PackageReference>
        <PackageReference Include="PolySharp" Version="1.12.1">
            <GeneratePathProperty>true</GeneratePathProperty>
            <PrivateAssets>all</PrivateAssets>
            <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
        </PackageReference>
    </ItemGroup>

    <!-- Project References -->
    <ItemGroup>
        <ProjectReference Include="..\Core\Jay.SourceGen.csproj">
            <GeneratePathProperty>true</GeneratePathProperty>
            <PrivateAssets>all</PrivateAssets>
        </ProjectReference>
        <ProjectReference Include="..\InterfaceGen.Attributes\InterfaceGen.Attributes.csproj">
            <PrivateAssets>all</PrivateAssets>
        </ProjectReference>
    </ItemGroup>

     <!-- Transient Dependency Fixes -->
    <PropertyGroup>
        <GetTargetPathDependsOn>$(GetTargetPathDependsOn);GetDependencyTargetPaths</GetTargetPathDependsOn>
    </PropertyGroup>
    <Target Name="GetDependencyTargetPaths">
        <ItemGroup>
            <TargetPathWithTargetPlatformMoniker Include="$(PKGIndexRange)\lib\netstandard2.0\IndexRange.dll" IncludeRuntimeDependency="false" />
            <!--<TargetPathWithTargetPlatformMoniker Include="$(PKGPolySharp)\lib\netstandard2.0\PolySharp.dll" IncludeRuntimeDependency="false" />-->
        </ItemGroup>
    </Target>
    
    <!-- This ensures the library will be packaged as a source generator when we use `dotnet pack` --><!--
    <ItemGroup>
        <None Include="$(OutputPath)\$(AssemblyName).dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />
        --><!-- Pack the attributes dll in the analyzers/dotnet/cs path --><!--
        <None Include="$(OutputPath)\Jay.SourceGen.InterfaceGen.Attributes.dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />

        --><!-- Pack the attributes dll in the lib\netstandard2.0 path --><!--
        <None Include="$(OutputPath)\Jay.SourceGen.InterfaceGen.Attributes.dll" Pack="true" PackagePath="lib\netstandard2.0" Visible="true" />

    </ItemGroup>-->

    <ItemGroup>
        <Using Include="Jay.SourceGen.InterfaceGen.Attributes" />
        <Using Include="Microsoft.CodeAnalysis" />
    </ItemGroup>
</Project>
